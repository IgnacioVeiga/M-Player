name: Build

on:
  push:
    branches: [main]
    paths-ignore:
      - "**.md"
      - "**.spec.js"
      - ".idea"
      - ".vscode"
      - ".dockerignore"
      - "Dockerfile"
      - ".gitignore"
      - ".github/**"
      - "!.github/workflows/build.yml"

permissions:
  contents: write

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.x.x

      - name: Install Dependencies
        run: npm install

      - name: Build Release Files
        run: npm run build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get project name and version
        id: pkginfo
        shell: bash
        run: |
          NAME=$(node -e "console.log(require('./package.json').name)")
          VERSION=$(node -e "console.log(require('./package.json').version)")
          echo "name=$NAME" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Check if Tag Exists
        id: check_tag
        run: |
          if git ls-remote --tags origin | grep -q "refs/tags/v${{ steps.pkg.outputs.version }}$"; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.pkgname.outputs.name }}_v${{ steps.pkg.outputs.version }}_${{ matrix.os }}
          path: release/
          retention-days: 5

      - name: Create Release
        id: create_release
        if: steps.check_tag.outputs.exists == 'false'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.pkg.outputs.version }}
          release_name: ${{ steps.pkgname.outputs.name }} v${{ steps.pkg.outputs.version }}
          draft: false
          prerelease: false

      - name: Zip Release Files
        run: |
          zip -r ${{ steps.pkgname.outputs.name }}_v${{ steps.pkg.outputs.version }}_${{ matrix.os }}.zip ./release/*
        shell: bash

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ steps.pkgname.outputs.name }}_v${{ steps.pkg.outputs.version }}_${{ matrix.os }}.zip
          asset_name: ${{ steps.pkgname.outputs.name }}_v${{ steps.pkg.outputs.version }}_${{ matrix.os }}.zip
          asset_content_type: application/zip